{"version":3,"sources":["rules/checkParamNames.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;;;;;;AAEA,IAAM,yBAAyB,SAAzB,sBAAyB,CAAC,aAAD,EAAyB,sBAAzB,EAAiE,mBAAjE,EAAsG,MAAtG,EAA4H;AACvJ,WAAO,oBAAO,mBAAP,EAA4B,UAAC,kBAAD,EAAqB,KAArB,EAA+B;AAC9D,YAAM,wBAAwB,uBAAuB,KAAvB,CAA9B;;AAEA,YAAI,CAAC,qBAAL,EAA4B;AACxB,mBAAO,MAAM,aAAN,GAAsB,IAAtB,GAA6B,kBAA7B,GAAkD,kDAAzD;;AAEA,mBAAO,IAAP;AACH;;AAED,YAAI,0BAA0B,iBAA9B,EAAiD;AAC7C;AACH;;AAED,YAAI,0BAA0B,kBAA9B,EAAkD;AAC9C,mBAAO,eAAe,aAAf,GAA+B,gBAA/B,GAAkD,uBAAuB,IAAvB,CAA4B,IAA5B,CAAlD,GAAsF,UAAtF,GAAmG,oBAAoB,IAApB,CAAyB,IAAzB,CAAnG,GAAoI,IAA3I;;AAEA,mBAAO,IAAP;AACH;;AAED,eAAO,KAAP;AACH,KApBM,CAAP;AAqBH,CAtBD;;AAwBA,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,aAAD,EAAyB,mBAAzB,EAA8D,MAA9D,EAAoF;AACnH,QAAI,0BAAJ;;AAEA,WAAO,oBAAO,mBAAP,EAA4B,UAAC,kBAAD,EAAwB;AACvD,YAAM,iBAAiB,wBAAW,kBAAX,EAA+B,GAA/B,CAAvB;;AAEA,YAAI,cAAJ,EAAoB;AAChB,gBAAI,CAAC,iBAAL,EAAwB;AACpB,uBAAO,MAAM,aAAN,GAAsB,sBAAtB,GAA+C,kBAA/C,GAAoE,uCAA3E;;AAEA,uBAAO,IAAP;AACH;;AAED,gBAAM,mBAAmB,mBAAmB,KAAnB,CAAyB,CAAzB,EAA4B,mBAAmB,OAAnB,CAA2B,GAA3B,CAA5B,CAAzB;;AAEA,gBAAI,qBAAqB,iBAAzB,EAA4C;AACxC,uBAAO,MAAM,aAAN,GAAsB,sBAAtB,GAA+C,kBAA/C,GAAoE,sBAApE,GAA6F,gBAA7F,GAAgH,mDAAhH,GAAsK,iBAAtK,GAA0L,KAAjM;;AAEA,uBAAO,IAAP;AACH;AACJ,SAdD,MAcO;AACH,gCAAoB,kBAApB;AACH;;AAED,eAAO,KAAP;AACH,KAtBM,CAAP;AAuBH,CA1BD;;kBA4Be,4BAAa,gBAGtB;AAAA,QAFF,MAEE,QAFF,MAEE;AAAA,QADF,KACE,QADF,KACE;;AACF,QAAM,yBAAyB,MAAM,yBAAN,EAA/B;AACA,QAAM,sBAAsB,MAAM,sBAAN,EAA5B;AACA,QAAM,0BAA0B,MAAM,0BAAN,EAAhC;AACA,QAAM,gBAAgB,MAAM,mBAAN,CAA0B,OAA1B,CAAtB;AACA,QAAM,UAAU,uBAAuB,aAAvB,EAAsC,sBAAtC,EAA8D,mBAA9D,EAAmF,MAAnF,CAAhB;;AAEA,QAAI,OAAJ,EAAa;AACT;AACH;;AAED,+BAA2B,aAA3B,EAA0C,uBAA1C,EAAmE,MAAnE;AACH,CAfc,C","file":"checkParamNames.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdocParameterNames : Array<string>, report : Function) => {\n    return _.some(jsdocParameterNames, (jsdocParameterName, index) => {\n        const functionParameterName = functionParameterNames[index];\n\n        if (!functionParameterName) {\n            report('@' + targetTagName + ' \"' + jsdocParameterName + '\" does not match an existing function parameter.');\n\n            return true;\n        }\n\n        if (functionParameterName === '<ObjectPattern>') {\n            return;\n        }\n\n        if (functionParameterName !== jsdocParameterName) {\n            report('Expected @' + targetTagName + ' names to be \"' + functionParameterNames.join(', ') + '\". Got \"' + jsdocParameterNames.join(', ') + '\".');\n\n            return true;\n        }\n\n        return false;\n    });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, report : Function) => {\n    let lastRealParameter;\n\n    return _.some(jsdocParameterNames, (jsdocParameterName) => {\n        const isPropertyPath = _.includes(jsdocParameterName, '.');\n\n        if (isPropertyPath) {\n            if (!lastRealParameter) {\n                report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n                return true;\n            }\n\n            const pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n            if (pathRootNodeName !== lastRealParameter) {\n                report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' + pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n                return true;\n            }\n        } else {\n            lastRealParameter = jsdocParameterName;\n        }\n\n        return false;\n    });\n};\n\nexport default iterateJsdoc(({\n    report,\n    utils\n}) => {\n    const functionParameterNames = utils.getFunctionParameterNames();\n    const jsdocParameterNames = utils.getJsdocParameterNames();\n    const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n    const targetTagName = utils.getPreferredTagName('param');\n    const isError = validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report);\n\n    if (isError) {\n        return;\n    }\n\n    validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n});\n"]}