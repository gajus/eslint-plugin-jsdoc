{"version":3,"sources":["rules/requireDescriptionCompleteSentence.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAEA,IAAM,oBAAoB,SAApB,iBAAoB,CAAC,IAAD,EAAU;AAChC,WAAO,KAAK,KAAL,CAAW,MAAX,CAAP;AACH,CAFD;;AAIA,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,IAAD,EAAU;AACzC,QAAI,6BAAJ;;AAEA,QAAM,QAAQ,KAAK,KAAL,CAAW,IAAX,CAAd;;AAEA,WAAO,CAAC,oBAAO,KAAP,EAAc,UAAC,IAAD,EAAU;AAC5B,YAAI,yBAAY,oBAAZ,KAAqC,CAAC,oBAAtC,IAA8D,SAAS,IAAT,CAAc,IAAd,CAAlE,EAAuF;AACnF,mBAAO,IAAP;AACH;;AAED,+BAAuB,MAAM,IAAN,CAAW,IAAX,CAAvB;;AAEA,eAAO,KAAP;AACH,KARO,CAAR;AASH,CAdD;;AAgBA,IAAM,sBAAsB,SAAtB,mBAAsB,CAAC,WAAD,EAAc,MAAd,EAAyB;AACjD,QAAI,CAAC,WAAL,EAAkB;AACd,eAAO,KAAP;AACH;;AAED,QAAM,aAAa,kBAAkB,WAAlB,CAAnB;;AAEA,WAAO,oBAAO,UAAP,EAAmB,UAAC,SAAD,EAAY,KAAZ,EAAsB;AAC5C,YAAI,CAAC,SAAS,IAAT,CAAc,SAAd,CAAL,EAA+B;AAC3B,gBAAI,UAAU,CAAd,EAAiB;AACb,uBAAO,qDAAP;AACH,aAFD,MAEO;AACH,uBAAO,mDAAP;AACH;;AAED,mBAAO,IAAP;AACH;;AAED,YAAI,CAAC,MAAM,IAAN,CAAW,SAAX,CAAL,EAA4B;AACxB,mBAAO,kCAAP;;AAEA,mBAAO,IAAP;AACH;;AAED,YAAI,CAAC,2BAA2B,SAA3B,CAAL,EAA4C;AACxC,mBAAO,sGAAP;;AAEA,mBAAO,IAAP;AACH;;AAED,eAAO,KAAP;AACH,KAxBM,CAAP;AAyBH,CAhCD;;kBAkCe,4BAAa,gBAGtB;AAAA,QAFF,KAEE,QAFF,KAEE;AAAA,QADF,MACE,QADF,MACE;;AACF,QAAI,oBAAoB,MAAM,WAA1B,EAAuC,MAAvC,CAAJ,EAAoD;AAChD;AACH;;AAED,QAAM,OAAO,sBAAS,MAAM,IAAf,EAAqB,UAAC,GAAD,EAAS;AACvC,eAAO,wBAAW,CAAC,OAAD,EAAU,SAAV,CAAX,EAAiC,IAAI,GAArC,CAAP;AACH,KAFY,CAAb;;AAIA,wBAAO,IAAP,EAAa,UAAC,GAAD,EAAS;AAClB,YAAM,cAAc,yBAAY,IAAI,WAAhB,EAA6B,IAA7B,CAApB;;AAEA,eAAO,oBAAoB,WAApB,EAAiC,MAAjC,CAAP;AACH,KAJD;AAKH,CAjBc,C","file":"requireDescriptionCompleteSentence.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n    return text.split(/\\n\\n/);\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n    let lastLineEndsSentence;\n\n    const lines = text.split('\\n');\n\n    return !_.some(lines, (line) => {\n        if (_.isBoolean(lastLineEndsSentence) && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n            return true;\n        }\n\n        lastLineEndsSentence = /\\.$/.test(line);\n\n        return false;\n    });\n};\n\nconst validateDescription = (description, report) => {\n    if (!description) {\n        return false;\n    }\n\n    const paragraphs = extractParagraphs(description);\n\n    return _.some(paragraphs, (paragraph, index) => {\n        if (!/^[A-Z]/.test(paragraph)) {\n            if (index === 0) {\n                report('Description must start with an uppercase character.');\n            } else {\n                report('Paragraph must start with an uppercase character.');\n            }\n\n            return true;\n        }\n\n        if (!/\\.$/.test(paragraph)) {\n            report('Sentence must end with a period.');\n\n            return true;\n        }\n\n        if (!isNewLinePrecededByAPeriod(paragraph)) {\n            report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n            return true;\n        }\n\n        return false;\n    });\n};\n\nexport default iterateJsdoc(({\n    jsdoc,\n    report\n}) => {\n    if (validateDescription(jsdoc.description, report)) {\n        return;\n    }\n\n    const tags = _.filter(jsdoc.tags, (tag) => {\n        return _.includes(['param', 'returns'], tag.tag);\n    });\n\n    _.some(tags, (tag) => {\n        const description = _.trimStart(tag.description, '- ');\n\n        return validateDescription(description, report);\n    });\n});\n"]}