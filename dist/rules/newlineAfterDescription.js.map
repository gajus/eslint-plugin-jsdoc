{"version":3,"sources":["rules/newlineAfterDescription.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;;;;;;kBAEe,4BAAa,gBAItB;AAAA,QAHF,KAGE,QAHF,KAGE;AAAA,QAFF,MAEE,QAFF,MAEE;AAAA,QADF,OACE,QADF,OACE;;AACF,QAAI,eAAJ;;AAEA,QAAI,CAAC,MAAM,WAAP,IAAsB,CAAC,MAAM,IAAN,CAAW,MAAtC,EAA8C;AAC1C;AACH;;AAED,QAAI,mBAAM,QAAQ,OAAd,EAAuB,CAAvB,CAAJ,EAA+B;AAC3B,iBAAS,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,QAAhC;AACH,KAFD,MAEO;AACH,iBAAS,IAAT;AACH;;;;;AAKD,QAAM,8BAA8B,0BAAa,MAAM,MAAN,CAAa,KAAb,CAAmB,MAAM,WAAN,CAAkB,MAArC,CAAb,EAA2D,MAA3D,CAApC;;AAEA,QAAI,MAAJ,EAAY;AACR,YAAI,CAAC,2BAAL,EAAkC;AAC9B,mBAAO,mEAAP;AACH;AACJ,KAJD,MAIO;AACH,YAAI,2BAAJ,EAAiC;AAC7B,mBAAO,oEAAP;AACH;AACJ;AACJ,CA/Bc,C","file":"newlineAfterDescription.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nexport default iterateJsdoc(({\n    jsdoc,\n    report,\n    context\n}) => {\n    let always;\n\n    if (!jsdoc.description || !jsdoc.tags.length) {\n        return;\n    }\n\n    if (_.has(context.options, 0)) {\n        always = context.options[0] === 'always';\n    } else {\n        always = true;\n    }\n\n    // The contents of the jsdoc.source and of jsdoc.description is left trimmed.\n    // The contents of the jsdoc.description is right trimmed.\n    // This gets the text following the description.\n    const descriptionEndsWithANewline = _.startsWith(jsdoc.source.slice(jsdoc.description.length), '\\n\\n');\n\n    if (always) {\n        if (!descriptionEndsWithANewline) {\n            report('There must be a newline after the description of the JSDoc block.');\n        }\n    } else {\n        if (descriptionEndsWithANewline) {\n            report('There must be no newline after the description of the JSDoc block.');\n        }\n    }\n});\n"]}