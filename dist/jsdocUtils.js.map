{"version":3,"sources":["jsdocUtils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAEA,IAAM,4BAA4B,SAA5B,yBAA4B,CAAC,YAAD,EAA2C;AACzE,WAAO,mBAAM,aAAa,MAAnB,EAA2B,UAAC,KAAD,EAAW;AACzC,YAAI,mBAAM,KAAN,EAAa,MAAb,CAAJ,EAA0B;AACtB,mBAAO,MAAM,IAAb;AACH;;AAED,YAAI,mBAAM,KAAN,EAAa,WAAb,CAAJ,EAA+B;AAC3B,mBAAO,MAAM,IAAN,CAAW,IAAlB;AACH;;AAED,YAAI,MAAM,IAAN,KAAe,eAAnB,EAAoC;AAChC,mBAAO,iBAAP;AACH;;AAED,YAAI,MAAM,IAAN,KAAe,aAAnB,EAAkC;AAC9B,mBAAO,MAAM,QAAN,CAAe,IAAtB;AACH;;AAED,cAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH,KAlBM,CAAP;AAmBH,CApBD;;;;;AAyBA,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,KAAD,EAAiB,aAAjB,EAA4D;AAC3F,QAAI,4BAAJ;;AAEA,0BAAsB,sBAAS,MAAM,IAAf,EAAqB;AACvC,aAAK;AADkC,KAArB,CAAtB;;AAIA,0BAAsB,mBAAM,mBAAN,EAA2B,MAA3B,CAAtB;;AAEA,WAAO,mBAAP;AACH,CAVD;;AAYA,IAAM,yBAAyB,SAAzB,sBAAyB,CAAC,KAAD,EAAiB,aAAjB,EAA4D;AACvF,QAAI,4BAAJ;;AAEA,0BAAsB,2BAA2B,KAA3B,EAAkC,aAAlC,CAAtB;;AAEA,0BAAsB,sBAAS,mBAAT,EAA8B,UAAC,IAAD,EAAU;AAC1D,eAAO,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA9B;AACH,KAFqB,CAAtB;;AAIA,WAAO,mBAAP;AACH,CAVD;;AAYA,IAAM,sBAAsB,SAAtB,mBAAsB,CAAC,IAAD,EAAyD;AAAA,QAAzC,aAAyC,yDAAhB,EAAgB;;AACjF,QAAI,wBAAW,sBAAS,aAAT,CAAX,EAAoC,IAApC,CAAJ,EAA+C;AAC3C,eAAO,IAAP;AACH;;AAED,QAAM,mBAAmB,2CAAoB,UAAC,OAAD,EAAa;AACtD,eAAO,wBAAW,OAAX,EAAoB,IAApB,CAAP;AACH,KAFwB,CAAzB;;AAIA,QAAI,gBAAJ,EAAsB;AAClB,eAAO,gBAAP;AACH;;AAED,WAAO,mBAAM,aAAN,EAAqB,IAArB,IAA6B,cAAc,IAAd,CAA7B,GAAmD,IAA1D;AACH,CAdD;;AAgBA,IAAM,aAAa,SAAb,UAAa,CAAC,IAAD,EAA6B;AAC5C,QAAM,gBAAgB,wCAAiB,MAAjB,CAAwB,uBAAU,yCAAV,CAAxB,CAAtB;;AAEA,WAAO,wBAAW,aAAX,EAA0B,IAA1B,CAAP;AACH,CAJD;;kBAMe;AACX,wDADW;AAEX,kDAFW;AAGX,0DAHW;AAIX,4CAJW;AAKX;AALW,C","file":"jsdocUtils.js","sourcesContent":["import _ from 'lodash';\nimport tagNames from './tagNames';\n\nconst getFunctionParameterNames = (functionNode : Object) : Array<string> => {\n    return _.map(functionNode.params, (param) => {\n        if (_.has(param, 'name')) {\n            return param.name;\n        }\n\n        if (_.has(param, 'left.name')) {\n            return param.left.name;\n        }\n\n        if (param.type === 'ObjectPattern') {\n            return '<ObjectPattern>';\n        }\n\n        if (param.type === 'RestElement') {\n            return param.argument.name;\n        }\n\n        throw new Error('Unsupported function signature format.');\n    });\n};\n\n/**\n * Gets all parameter names, including those that refer to a path, e.g. \"@param foo; @param foo.bar\".\n */\nconst getJsdocParameterNamesDeep = (jsdoc : Object, targetTagName : string) : Array<string> => {\n    let jsdocParameterNames;\n\n    jsdocParameterNames = _.filter(jsdoc.tags, {\n        tag: targetTagName\n    });\n\n    jsdocParameterNames = _.map(jsdocParameterNames, 'name');\n\n    return jsdocParameterNames;\n};\n\nconst getJsdocParameterNames = (jsdoc : Object, targetTagName : string) : Array<string> => {\n    let jsdocParameterNames;\n\n    jsdocParameterNames = getJsdocParameterNamesDeep(jsdoc, targetTagName);\n\n    jsdocParameterNames = _.filter(jsdocParameterNames, (name) => {\n        return name.indexOf('.') === -1;\n    });\n\n    return jsdocParameterNames;\n};\n\nconst getPreferredTagName = (name : string, tagPreference : Object = {}) : string => {\n    if (_.includes(_.values(tagPreference), name)) {\n        return name;\n    }\n\n    const preferredTagName = _.findKey(tagNames, (aliases) => {\n        return _.includes(aliases, name);\n    });\n\n    if (preferredTagName) {\n        return preferredTagName;\n    }\n\n    return _.has(tagPreference, name) ? tagPreference[name] : name;\n};\n\nconst isValidTag = (name : string) : boolean => {\n    const validTagNames = _.keys(tagNames).concat(_.flatten(_.values(tagNames)));\n\n    return _.includes(validTagNames, name);\n};\n\nexport default {\n    getFunctionParameterNames,\n    getJsdocParameterNames,\n    getJsdocParameterNamesDeep,\n    getPreferredTagName,\n    isValidTag\n};\n"]}